===========================================
The ``snfee-crd2rhd`` program
===========================================

:Author: F.Mauger <mauger@lpccaen.in2p3.fr>
:Date: 2018-11-22

The ``snfee-crd2rhd``  program converts  the *commissioning  raw data*
(``CRD``) from the  test data acquisition program provided  by the LAL
team  (*SN CRATE  SOFTWARE*, version  >=  2.4, by  Jihane Maalmi,  LAL
orsay)  to the  official  SuperNEMO  data format  for  *raw hit  data*
(``RHD``) as defined in the SNFrontEndElectronics_ library.

.. _SNFrontEndElectronics: https://gitlab.in2p3.fr/SuperNEMO-DBD/SNFrontEndElectronics

.. contents::

-------
   
Description of the data model
=============================

The ``CRD`` data
----------------

The ``CRD`` data is based on ASCII formatted files generated by the SN
CRATE SOFTWARE  (upgraded to version 2.4  for Manchester Commissioning
Runs). These  files have  been designed for  testing and  diagnose the
behaviour  of  the front-end  electronics  (firmware).   They are  not
intended for production operations, only commissioning tests. However,
it is possible  to use these files  in such a way we  can extract from
them collected raw hits informations and perform a conversion into the
offical SuperNEMO ``RHD`` data model.

The  SN CRATE  SOFTWARE is  a Labwin/CVI-based  software written  in C
running on the Windows OS.  It  comes with a high level graphical user
interface to allow low-level debugging of the firmware embedded in the
front-end boards'  FPGAs (FEBn  CB, TB).  The  application is  able to
manage  front-end crates  (calorimeter or  tracker) using  a dedicated
protocol on USB or UDP links.

Each managed  crate generates  its own  independant output  file.  The
output file  has a 9  lines long  header (lines starting  with ``==``)
with some basic informations about the run and the data format.  Then,
the file  contains a sequence of  *hit records*.  Each hit  record has
its  own  one-line  header  (line  starting  with  ``= HIT``)  which
describes  the type  of  the  hit (``CALO``  or  ``TRACKER``) and  the
trigger identifier the hit is  associated to (``TRIG_ID``).  After the
hit header  comes the data associated  to the hit.  Typical  output is
shown  below for  a run  operating a  tracker crate  (software version
2.4, june 2018):
  
.. code::  bash

     === DATA FILE SAVED WITH SN CRATE SOFTWARE VERSION: V2.4  == \
       DATE OF RUN: UnixTime = 1530208750.723 \
       date = 2018.6.28 time = 18h.59m.10s.723ms  ===
     === OTHER INFORMATIONS ===
     === DATA TYPE : RAW ===
     === DATA STRUCTURE INFO ===
     === HIT number(int)  = CALO = TRIGGER_ID  (int)===
     === SlotIndex (int) Ch (int) LTO_FLAG( 0 or 1) HT_FLAG (0 or 1 )EvtID (int) \
       RawTDC (unsigned long long) TDC (double in ns) LT_TrigCount(int) \
       LT_TimeCount(int) RawBaseline (signed short *16) Baseline (float in Volts) \
       RawPeak (signed shor *8) Peak (float in Volts) PeakCell (unsigned short) \
       RawCharge (int) Charge (float in pC) \
       ChargeOverflow(int) RisingEdgeCell (int) RisingTimeOffset(int * 256) \
       RisingEdgeTime (float in ns) FallingEdgeCell(int) FallingEdgeOffset (int *256) \
       FallingEdgeTime ( float in ns) FCR (uint) UnixTime (double) ===
     === DataSamples[array of int16] ===
     === HIT number(int)  = TRACKER = TRIGGER_ID  (int)===
     === SlotIndex (int) FeastIndex (int) Channel (int) ChannelType ('AN or 'CA') \
       RegisterType ('R0 (StartT0)', 'R1(1st HNT)', 'R2 (2nd HNT)', 'R3'(1st HPT) \
       or 'R4' (2nd HPT)) RawTimeStamp (unsigned long long) UnixTime (double) ===
     = HIT 0 = TRACKER = TRIG_ID 1 =
     Slot 6 Feast 0 Ch 11 CA R0 921594475 11519930937.500000 UnixTime 1530208788.283001
     = HIT 1 = TRACKER = TRIG_ID 1 =
     Slot 6 Feast 1 Ch 18 AN R0 921591763 11519897037.500000 UnixTime 1530208788.283001
     ...
..

A similar layout, albeit more complicated, is used to encode the calorimeter hits.

The ``RHD`` data
----------------

The ``RHD`` data is described through a set of C++ classes implemented
in  the  ``SNFEE``   library.   The  classes  can  be   found  in  the
``libs/SNFEE/src/snfee/data/``        directory        from        the
SNFrontEndElectronics_ project.   The data models contains  three data
structures to describe different types of hit records collected by the
data acquisition program:

* class ``snfee::data::calo_hit_record`` :  represents the calorimeter
  raw hit data as collected by  the SAMLONG chipset and routed through
  calorimeter control boards (CB).
* class ``snfee::data::tracker_hit_record.h`` : represents the tracker
  raw hit  data as collected by  the FEAST chipset and  routed through
  tracker control boards (CB).
* class   ``snfee::data::trigger_record.cc``  :   records  the   final
  triggering conditions in the Trigger Board (not implemented yet).

-------

The program
===========

The ``snfee-crd2rhd`` converts a  single input datafile using the
``CRD`` data format  to an output file using  the serialization system
implemented  in the  ``SNFEE`` library  which is  compatible with  the
Falaise  serialization  system  (based on  Bayeux/Boost  serialization
libraries).

The  output file  must  use one  of the  available  formats in  Bayeux,
automatically selected from the file extension:

* ``.xml``, ``.xml.gz``,  ``.xml.bz2`` : plain or  compressed XML portable text
  format (for test and debugging purpose, to be used with small amount of data only),
* ``.txt``, ``.txt.gz``, ``.txt.bz2`` : plain or compressed ASCII portable text
  format,
* ``.data``,  ``.data.gz``,   ``.data.bz2``  :  plain   or  compressed
  portable binary format (for production).


Usage
-----

Online help can be printed with:

.. code:: bash

   $ snfee-crd2rhd --help
..

Example
-------

Processing a data file from a calorimeter crate
-----------------------------------------------

The  following  command illustrates  how  to  convert a  commissioning
tracker raw data file from  the *Manchester Commissioning Runs* to the
official format, using an arbitrary crate number (from 0 to 2):

.. code:: bash

   $ snfee-crd2rhd \
      --logging "warning" \
      --crate-number 0 \
      --input-file "/data/SuperNEMO/ManCom2108/Run_8/calo/RunCalo_8.dat" \
      --output-file "snemo_run-8_rhd_calo-0.xml"
..

The human readable  output file ``snemo_run-8_rhd_calo-0.xml`` here  contains calorimeter raw hit
records with the following layout:

.. code:: xml

   <?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
   <!DOCTYPE boost_serialization>
   <boost_serialization signature="serialization::archive" version="14">
   <record>snfee::data::calo_hit_record</record>
   <record class_id="0" tracking_level="1" version="0" object_id="_0">
        <datatool__i_serializable class_id="1" tracking_level="0" version="0">\
	   </datatool__i_serializable>
        <hit_num>0</hit_num>
        <trigger_id>1</trigger_id>
        <tdc>1843183009</tdc>
        <crate_num>0</crate_num>
        <board_num>2</board_num>
        <chip_num>2</chip_num>
        <event_id>1</event_id>
        <l2_id>1</l2_id>
        <fcr>128</fcr>
        <has_waveforms>1</has_waveforms>
        <waveform_start_sample>0</waveform_start_sample>
        <waveform_number_of_samples>1024</waveform_number_of_samples>
        <waveforms_record class_id="2" tracking_level="0" version="0">
        <samples>... notprintable binary data ...</samples>
        </waveforms_record>
	<channel_data>
                <count>2</count>
                <item class_id="3" tracking_level="0" version="0">
                        <lt>0</lt>
                        <ht>0</ht>
                        <underflow>0</underflow>
                        <overflow>0</overflow>
                        <baseline>-2</baseline>
                        <peak>-31</peak>
                        <peak_cell>44</peak_cell>
                        <charge>-51</charge>
                        <rising_cell>44</rising_cell>
                        <falling_cell>42</falling_cell>
                </item>
                <item>
                        <lt>1</lt>
                        <ht>1</ht>
                        <underflow>0</underflow>
                        <overflow>0</overflow>
                        <baseline>-4</baseline>
                        <peak>-4182</peak>
                        <peak_cell>601</peak_cell>
                        <charge>-16701</charge>
                        <rising_cell>631</rising_cell>
                        <falling_cell>589</falling_cell>
                </item>
        </channel_data>
   </record>

..


Processing a data file from a tracker crate
-------------------------------------------

The  following  command illustrates  how  to  convert a  commissioning
tracker raw data file from  the *Manchester Commissioning Runs* to the
official format, using an arbitrary tracker crate number (from 0 to 2):

.. code:: bash

   $ snfee-crd2rhd \
      --logging "warning" \
      --crate-number 2 \
      --input-file "/data/SuperNEMO/ManCom2108/Run_8/tracker/RunTracker_8.dat" \
      --output-file "snemo_run-8_rhd_tracker-0.xml"
..

The human readable  output file ``snemo_run-8_rhd_tracker-0.xml`` here  contains tracker raw hit
records with the following layout:
	     
.. code:: xml
	       
   <?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
   <!DOCTYPE boost_serialization>
   <boost_serialization signature="serialization::archive" version="14">
   <record>snfee::data::tracker_hit_record</record>
   <record class_id="0" tracking_level="1" version="0" object_id="_0">
        <datatool__i_serializable class_id="1" tracking_level="0" version="0">\
	      </datatool__i_serializable>
	<hit_num>0</hit_num>
        <trigger_id>1</trigger_id>
        <crate_num>2</crate_num>
        <board_num>6</board_num>
        <chip_num>0</chip_num>
        <channel_num>11</channel_num>
        <channel_category>2</channel_category>
        <timestamp_category>5</timestamp_category>
        <timestamp>921594475</timestamp>
   </record>
   </boost_serialization>
..


.. end
   
